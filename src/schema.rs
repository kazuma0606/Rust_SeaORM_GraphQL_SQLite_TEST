use crate::command::{create_user, delete_user};
use crate::gql::types::{CreateUserInput, UserObject}; // ‚úÖ ‰øÆÊ≠£
use crate::query::{get_user, list_users};
use async_graphql::{EmptySubscription, Object, Schema};
use sea_orm::DatabaseConnection;
use uuid::Uuid;

pub struct QueryRoot;

#[Object]
impl QueryRoot {
    async fn get_user(&self, id: String) -> Option<UserObject> {
        let uuid = Uuid::parse_str(&id).ok()?; // ‚úÖ `String` ‚Üí `Uuid`
        get_user::get_user(uuid)
            .await
            .ok()
            .flatten()
            .map(UserObject::from)
    }

    // „É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„ÇíÂèñÂæó„Åô„Çã„É™„Çæ„É´„Éê„ÇíËøΩÂä†
    async fn users(&self) -> Vec<UserObject> {
        match list_users::list_users().await {
            Ok(users) => users.into_iter().map(UserObject::from).collect(),
            Err(e) => {
                println!("‚ùå „É¶„Éº„Ç∂„Éº‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº: {:?}", e);
                vec![] // „Ç®„É©„ÉºÊôÇ„ÅØÁ©∫„ÅÆÈÖçÂàó„ÇíËøî„Åô
            }
        }
    }
}

pub struct MutationRoot;

#[Object]
impl MutationRoot {
    async fn create_user(&self, input: CreateUserInput) -> async_graphql::Result<UserObject> {
        println!("üìä GraphQL create_user „É™„Çæ„É´„Éê„ÅåÂëº„Å≥Âá∫„Åï„Çå„Åæ„Åó„Åü");

        match create_user::create_user(input.name, input.email).await {
            Ok(user_model) => {
                println!("‚úÖ DBÊìç‰ΩúÊàêÂäü„ÄÇ„É¶„Éº„Ç∂„Éº„É¢„Éá„É´: {:?}", user_model);
                println!("ID: {}", user_model.id);

                let user_object = UserObject {
                    id: user_model.id.to_string(),
                    name: user_model.name,
                    email: user_model.email,
                };

                println!("‚úÖ Â§âÊèõÂæå„ÅÆ UserObject: {:?}", user_object);
                Ok(user_object)
            }
            Err(e) => {
                println!("‚ùå „É¶„Éº„Ç∂„Éº‰ΩúÊàê„Ç®„É©„Éº: {:?}", e);
                Err(async_graphql::Error::new(format!(
                    "„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: {:?}",
                    e
                )))
            }
        }
    }

    async fn delete_user(&self, id: String) -> async_graphql::Result<bool> {
        let uuid = match Uuid::parse_str(&id) {
            Ok(uuid) => uuid,
            Err(_) => return Err(async_graphql::Error::new("Invalid UUID format")),
        };

        match delete_user::delete_user(uuid).await {
            Ok(_) => Ok(true),
            Err(_) => Ok(false),
        }
    }
}

pub type AppSchema = Schema<QueryRoot, MutationRoot, async_graphql::EmptySubscription>;

pub fn create_schema(db: DatabaseConnection) -> Schema<QueryRoot, MutationRoot, EmptySubscription> {
    Schema::build(QueryRoot, MutationRoot, EmptySubscription)
        .data(db) // `SeaORM` „ÅÆ `db` „Çí context „Å´ËøΩÂä†
        .finish()
}
